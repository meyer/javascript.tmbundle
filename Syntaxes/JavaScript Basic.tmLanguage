<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>JavaScript Syntax: version 2.0</string>
	<key>fileTypes</key>
	<array>
		<string>js</string>
		<string>htc</string>
		<string>jsx</string>
	</array>
	<key>foldingStartMarker</key>
	<string>(?x)^
			#   Yes *+      Open  (         Blank |Comments                                        | (No Paren | String) | String                                                        | (Nested Parens             )  )*+
			(?&gt; \g&lt;yesS&gt;*+  \[    (?&lt;yesS&gt;  (?!.) |//.*+|/\*((?!\*/).)++(\*/|$)|(^)((?!/\*).)*(\*/)| (?&lt;noS&gt;[^\[\]'"/]) | (?&lt;str&gt; '(\\'|[^'])*+' | "(\\"|[^"])*+" | /(\\/|[^/])*+/) | (?&lt;squar&gt; \[ \g&lt;yesS&gt;*+ \] )  )*+
			|   \g&lt;yesR&gt;*+  \(    (?&lt;yesR&gt;  (?!.) |//.*+|/\*((?!\*/).)++(\*/|$)|(^)((?!/\*).)*(\*/)| (?&lt;noR&gt;[^\(\)'"/]) | \g&lt;str&gt;                                                       | (?&lt;round&gt; \( \g&lt;yesR&gt;*+ \) )  )*+
			|   \g&lt;yesC&gt;*+  \{    (?&lt;yesC&gt;  (?!.) |//.*+|/\*((?!\*/).)++(\*/|$)|(^)((?!/\*).)*(\*/)| (?&lt;noC&gt;[^\{\}'"/]) | \g&lt;str&gt;                                                       | (?&lt;curly&gt; \{ \g&lt;yesC&gt;*+ \} )  )*+
		)$</string>
	<key>foldingStopMarker</key>
	<string>(?x)^
			#                     (         Blank |Comments                                        | (No Paren | String) | String                                                        | (Nested Parens             )  )*+  Close  Yes *+
			(?&gt;                   (?&lt;yesS&gt;  (?!.) |//.*+|/\*((?!\*/).)++(\*/|$)|(^)((?!/\*).)*(\*/)| (?&lt;noS&gt;[^\[\]'"/]) | (?&lt;str&gt; '(\\'|[^'])*+' | "(\\"|[^"])*+" | /(\\/|[^/])*+/) | (?&lt;squar&gt; \[ \g&lt;yesS&gt;*+ \] )  )*+  \]     \g&lt;yesS&gt;*+
			|                     (?&lt;yesR&gt;  (?!.) |//.*+|/\*((?!\*/).)++(\*/|$)|(^)((?!/\*).)*(\*/)| (?&lt;noR&gt;[^\(\)'"/]) | \g&lt;str&gt;                                                       | (?&lt;round&gt; \( \g&lt;yesR&gt;*+ \) )  )*+  \)     \g&lt;yesR&gt;*+
			|                     (?&lt;yesC&gt;  (?!.) |//.*+|/\*((?!\*/).)++(\*/|$)|(^)((?!/\*).)*(\*/)| (?&lt;noC&gt;[^\{\}'"/]) | \g&lt;str&gt;                                                       | (?&lt;curly&gt; \{ \g&lt;yesC&gt;*+ \} )  )*+  \}     \g&lt;yesC&gt;*+
		)$</string>
	<key>keyEquivalent</key>
	<string>^~J</string>
	<key>name</key>
	<string>Embedded JavaScript</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#everything</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#special-comments-conditional-compilation</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.documentation.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(//).*$\n?</string>
					<key>name</key>
					<string>comment.line.double-slash.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.html.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.html.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(&lt;!--|--&gt;)</string>
					<key>name</key>
					<string>comment.block.html.js</string>
				</dict>
			</array>
		</dict>
		<key>core</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#literal-function-constructor</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-number</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-regex</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-function-call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-labels</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-punctuation</string>
				</dict>
			</array>
		</dict>
		<key>es5-block</key>
		<dict>
			<key>begin</key>
			<string>{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.group.begin.es</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>12.1 Block http://es5.github.com/#x12.1</string>
			<key>contentName</key>
			<string>meta.block.es</string>
			<key>end</key>
			<string>}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.group.end.es</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#everything</string>
				</dict>
			</array>
		</dict>
		<key>es5-comments</key>
		<dict>
			<key>comment</key>
			<string>7.4 Comments http://es5.github.com/#x7.4</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.begin.es.ecmascript</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.end.es.ecmascript</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.es.ecmascript</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>//</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.es.ecmascript</string>
						</dict>
					</dict>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>comment.line.double-slash.es.ecmascript</string>
				</dict>
			</array>
		</dict>
		<key>es5-expression-left-hand-side</key>
		<dict>
			<key>comment</key>
			<string>11.2 Left-Hand-Side Expressions http://es5.github.com/#x11.2</string>
		</dict>
		<key>es5-expression-primary</key>
		<dict>
			<key>comment</key>
			<string>11.1 Primary Expressions http://es5.github.com/#x11.1</string>
		</dict>
		<key>es5-expression-statement</key>
		<dict>
			<key>comment</key>
			<string>12.4 Expression Statement http://es5.github.com/#x12.4</string>
		</dict>
		<key>es5-function-definition</key>
		<dict>
			<key>begin</key>
			<string>\b(function)\b(?:\s+\b(?i)([_$a-z][_$a-z0-9]*)\b)?</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.def.es</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.$1.es</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>13 Function Definition http://es5.github.com/#x13</string>
			<key>end</key>
			<string>(?&lt;=})</string>
			<key>name</key>
			<string>meta.$1.${2:-unnamed}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\G</string>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\G(?!\()</string>
							<key>comment</key>
							<string>function name</string>
							<key>end</key>
							<string>(?=\()</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#comments</string>
								</dict>
								<dict>
									<key>match</key>
									<string>\b(?i)[_$a-z][_$a-z0-9]*\b</string>
									<key>name</key>
									<string>entity.name.function.$1.es</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>\(</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.begin.function.es</string>
								</dict>
							</dict>
							<key>comment</key>
							<string>function parameters</string>
							<key>contentName</key>
							<string>meta.function.parameters</string>
							<key>end</key>
							<string>\)</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.end.function.es</string>
								</dict>
							</dict>
							<key>name</key>
							<string>meta.function.parameters</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#comments</string>
								</dict>
								<dict>
									<key>match</key>
									<string>\b(?i)[_$a-z][_$a-z0-9]*\b</string>
									<key>name</key>
									<string>variable.parameter.function.es</string>
								</dict>
								<dict>
									<key>match</key>
									<string>,</string>
									<key>name</key>
									<string>punctuation.separator.parameters.function.es</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.function.begin.es</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>function body</string>
					<key>contentName</key>
					<string>meta.function.body</string>
					<key>end</key>
					<string>}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.function.end.es</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#everything</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>es5-identifiers</key>
		<dict>
			<key>comment</key>
			<string>7.6 Identifier Names and Identifiers http://es5.github.com/#x7.6</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#identifiers-keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#identifiers-future-reserved-words</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#identifiers-future-reserved-words-strict</string>
				</dict>
			</array>
		</dict>
		<key>es5-identifiers-future-reserved-words</key>
		<dict>
			<key>comment</key>
			<string>7.6.1.2a Future Reserved Words http://es5.github.com/#x7.6.1.2</string>
			<key>match</key>
			<string>\b(super|c(onst|lass)|import|e(num|x(tends|port)))\b</string>
			<key>name</key>
			<string>invalid.illegal.reserved.keyword.$1.es.ecmascript</string>
		</dict>
		<key>es5-identifiers-future-reserved-words-strict</key>
		<dict>
			<key>comment</key>
			<string>7.6.1.2b Future Reserved Words http://es5.github.com/#x7.6.1.2</string>
			<key>match</key>
			<string>\b(static|yield|i(nterface|mplements)|p(ublic|ackage|r(ivate|otected))|let)\b</string>
			<key>name</key>
			<string>invalid.illegal.reserved.keyword.$1.es.ecmascript.strict</string>
		</dict>
		<key>es5-identifiers-keywords</key>
		<dict>
			<key>comment</key>
			<string>7.6.1.1 Keywords http://es5.github.com/#x7.6.1.1</string>
			<key>match</key>
			<string>\b(switch|new|c(ontinue|a(se|tch))|t(h(is|row)|ypeof|ry)|i(n(stanceof)?|f)|d(o|e(fault|lete|bugger))|else|v(oid|ar)|f(inally|or|unction)|w(hile|ith)|return|break)\b</string>
			<key>name</key>
			<string>keyword.other.$1.es.ecmascript</string>
		</dict>
		<key>es5-initialiser-array</key>
		<dict>
			<key>comment</key>
			<string>11.1.4 Array Initialiser http://es5.github.com/#x11.1.4</string>
		</dict>
		<key>es5-initialiser-object</key>
		<dict>
			<key>comment</key>
			<string>11.1.5 Object Initialiser http://es5.github.com/#x11.1.5</string>
		</dict>
		<key>es5-line-terminators</key>
		<dict>
			<key>comment</key>
			<string>7.3 Line Terminators http://es5.github.com/#x7.3</string>
		</dict>
		<key>es5-literal-numeric</key>
		<dict>
			<key>comment</key>
			<string>7.8.3 Numeric Literals http://es5.github.com/#x7.8.3</string>
		</dict>
		<key>es5-literal-string</key>
		<dict>
			<key>comment</key>
			<string>7.8.4 String Literals http://es5.github.com/#x7.8.4</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.es</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.es</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.character.newline.es</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.es</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string-escape</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.es</string>
						</dict>
					</dict>
					<key>end</key>
					<string>'|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.es</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.character.newline.es</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.es</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string-escape</string>
						</dict>
					</array>
				</dict>
			</array>
			<key>repository</key>
			<dict>
				<key>string-escape</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?i)\\u[0-9A-F]{4}</string>
							<key>name</key>
							<string>constant.character.escape.unicode.es</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?i)\\x[0-9A-F]{2}</string>
							<key>name</key>
							<string>constant.character.escape.hex.es</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\\"</string>
							<key>name</key>
							<string>constant.character.escape.quote.double.newline.es</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\\'</string>
							<key>name</key>
							<string>constant.character.escape.quote.single.newline.es</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?i)\\\n</string>
							<key>name</key>
							<string>punctuation.separator.continuation.string.es</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?i)\\['"\\bfnrtv]</string>
							<key>name</key>
							<string>constant.character.escape.es</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>invalid.deprecated.unnecessary.escape.es</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\\.</string>
							<key>name</key>
							<string>constant.character.escape.es</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>es5-literals</key>
		<dict>
			<key>comment</key>
			<string>7.8 Literals http://es5.github.com/#x7.8</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>7.8.1 Null Literals http://es5.github.com/#x7.8.1</string>
					<key>match</key>
					<string>\bnull\b</string>
					<key>name</key>
					<string>constant.language.null.es</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>7.8.2 Boolean Literals http://es5.github.com/#x7.8.2</string>
					<key>match</key>
					<string>\b(true|false)\b</string>
					<key>name</key>
					<string>constant.language.boolean.$1.es</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-numeric</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-string</string>
				</dict>
			</array>
		</dict>
		<key>es5-operator</key>
		<dict>
			<key>comment</key>
			<string>11 Operators http://es5.github.com/#x11</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>10.6 Arguments Object http://es5.github.com/#x10.6</string>
					<key>match</key>
					<string>\barguments\b</string>
					<key>name</key>
					<string>variable.language.arguments.es</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>11.1.1 The this Keyword http://es5.github.com/#x11.1.1</string>
					<key>match</key>
					<string>\bthis\b</string>
					<key>name</key>
					<string>variable.language.this.es</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>11.2.2 The new Operator http://es5.github.com/#x11.2.2</string>
					<key>match</key>
					<string>\bnew\b</string>
					<key>name</key>
					<string>keyword.operator.new.es</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.arithmetic.postfix.es</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>11.3 Postfix Expressions http://es5.github.com/#x11.3</string>
					<key>match</key>
					<string>\b\s*(\+\+|--)</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>11.9 Equality Operators http://es5.github.com/#x11.9</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>!==|!=|===|==</string>
							<key>name</key>
							<string>keyword.operator.equality.es</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>11.13 Assignment Operators http://es5.github.com/#x11.13</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>[-+*/%]=</string>
							<key>name</key>
							<string>keyword.operator.assignment.arithmetic.es</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(&gt;&gt;&gt;|&gt;&gt;|&lt;&lt;|[&amp;^|])=</string>
							<key>name</key>
							<string>keyword.operator.assignment.bitwise.es</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>11.4 Unary Operators http://es5.github.com/#x11.4</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\b(delete|void|typeof)\b</string>
							<key>name</key>
							<string>keyword.operator.$1.unary.es</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(\+\+|--)</string>
							<key>name</key>
							<string>keyword.operator.assignment.arithmetic.prefix.unary.es</string>
						</dict>
						<dict>
							<key>match</key>
							<string>[-+~](?!\s)</string>
							<key>name</key>
							<string>keyword.operator.unary.es</string>
						</dict>
						<dict>
							<key>match</key>
							<string>!</string>
							<key>name</key>
							<string>keyword.operator.logical.not.unary.es</string>
						</dict>
						<dict>
							<key>match</key>
							<string>~</string>
							<key>name</key>
							<string>keyword.operator.bitwise.not.unary.es</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>11.5 Multiplicative Operators http://es5.github.com/#x11.5</string>
					<key>match</key>
					<string>[*/%]</string>
					<key>name</key>
					<string>keyword.operator.arithmetic.multiplicative.es</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>11.6 Additive Operators http://es5.github.com/#x11.6</string>
					<key>match</key>
					<string>[-+]</string>
					<key>name</key>
					<string>keyword.operator.arithmetic.additive.es</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>11.7 Bitwise Shift Operators http://es5.github.com/#x11.7</string>
					<key>match</key>
					<string>&gt;&gt;&gt;|&gt;&gt;|&lt;&lt;</string>
					<key>name</key>
					<string>keyword.operator.bitwise.shift.es</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>11.10 Binary Bitwise Operators http://es5.github.com/#x11.10</string>
					<key>match</key>
					<string>[&amp;^|]</string>
					<key>name</key>
					<string>keyword.operator.bitwise.binary.es</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>11.11 Binary Logical Operators http://es5.github.com/#x11.11</string>
					<key>match</key>
					<string></string>
					<key>name</key>
					<string>keyword.operator.logical.binary.es</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>11.12 Conditional Operator http://es5.github.com/#x11.12</string>
					<key>match</key>
					<string></string>
					<key>name</key>
					<string>keyword.operator.conditional.es</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>11.8 Relational Operators http://es5.github.com/#x11.8</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\b(instanceof|in)\b</string>
							<key>name</key>
							<string>keyword.operator.comparison.$1.es</string>
						</dict>
						<dict>
							<key>match</key>
							<string>&gt;=|&lt;=|&gt;|&lt;</string>
							<key>name</key>
							<string>keyword.operator.comparison.es</string>
						</dict>
						<dict>
							<key>match</key>
							<string>=&gt;|=&lt;</string>
							<key>name</key>
							<string>invalid.illegal.operator.comparison.es</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>11.13 Assignment Operators http://es5.github.com/#x11.13</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>=</string>
							<key>name</key>
							<string>keyword.operator.assignment.simple.es</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>es5-program</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#es5-function-definition</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#es5-comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#es5-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#es5-identifiers</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#es5-literals</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#es5-block</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Not sure where else to put this, yet</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>;</string>
							<key>name</key>
							<string>punctuation.terminator.statement.es</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>es5-punctuators</key>
		<dict>
			<key>comment</key>
			<string>7.7 Punctuators http://es5.github.com/#x7.7</string>
		</dict>
		<key>es5-statement</key>
		<dict>
			<key>comment</key>
			<string>12 Statements http://es5.github.com/#x12</string>
		</dict>
		<key>es5-statement-break</key>
		<dict>
			<key>comment</key>
			<string>12.8 The Break Statement http://es5.github.com/#x12.8</string>
		</dict>
		<key>es5-statement-continue</key>
		<dict>
			<key>comment</key>
			<string>12.7 The Continue Statement http://es5.github.com/#x12.7</string>
		</dict>
		<key>es5-statement-debugger</key>
		<dict>
			<key>comment</key>
			<string>12.15 The Debugger Statement http://es5.github.com/#x12.15</string>
		</dict>
		<key>es5-statement-empty</key>
		<dict>
			<key>comment</key>
			<string>12.3 Empty Statement http://es5.github.com/#x12.3</string>
		</dict>
		<key>es5-statement-if</key>
		<dict>
			<key>comment</key>
			<string>12.5 If Statement http://es5.github.com/#x12.5</string>
		</dict>
		<key>es5-statement-iteration</key>
		<dict>
			<key>comment</key>
			<string>12.6 Iteration Statements http://es5.github.com/#x12.6</string>
		</dict>
		<key>es5-statement-labelled</key>
		<dict>
			<key>comment</key>
			<string>12.12 Labelled Statements http://es5.github.com/#x12.12</string>
		</dict>
		<key>es5-statement-return</key>
		<dict>
			<key>comment</key>
			<string>12.9 The Return Statement http://es5.github.com/#x12.9</string>
		</dict>
		<key>es5-statement-throw</key>
		<dict>
			<key>comment</key>
			<string>12.13 The Throw Statement http://es5.github.com/#x12.13</string>
		</dict>
		<key>es5-statement-try</key>
		<dict>
			<key>comment</key>
			<string>12.14 The try Statement http://es5.github.com/#x12.14</string>
		</dict>
		<key>es5-statement-variable</key>
		<dict>
			<key>comment</key>
			<string>12.2 Variable Statement http://es5.github.com/#x12.2</string>
		</dict>
		<key>es5-statement-with</key>
		<dict>
			<key>comment</key>
			<string>12.10 The With Statement http://es5.github.com/#x12.10</string>
		</dict>
		<key>es5-white-space</key>
		<dict>
			<key>comment</key>
			<string>7.2 White Space http://es5.github.com/#x7.2</string>
		</dict>
		<key>everything</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#es5-program</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#support</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#core</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#special</string>
				</dict>
			</array>
		</dict>
		<key>function-definition</key>
		<dict>
			<key>begin</key>
			<string>\b(function)\b(?:\s+\b(?i)([_$a-z][_$a-z0-9]*)\b)?</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.def.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.$1.js</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>13 Function Definition http://es5.github.com/#x13</string>
			<key>end</key>
			<string>(?&lt;=})</string>
			<key>name</key>
			<string>meta.$1.${2:-unnamed}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\G</string>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\G(?!\()</string>
							<key>comment</key>
							<string>function name</string>
							<key>end</key>
							<string>(?=\()</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#comments</string>
								</dict>
								<dict>
									<key>match</key>
									<string>\b(?i)[_$a-z][_$a-z0-9]*\b</string>
									<key>name</key>
									<string>entity.name.function.$1.js</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>\(</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.begin.function.js</string>
								</dict>
							</dict>
							<key>comment</key>
							<string>function parameters</string>
							<key>contentName</key>
							<string>meta.function.parameters</string>
							<key>end</key>
							<string>\)</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.end.function.js</string>
								</dict>
							</dict>
							<key>name</key>
							<string>meta.function.parameters</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#comments</string>
								</dict>
								<dict>
									<key>match</key>
									<string>\b(?i)[_$a-z][_$a-z0-9]*\b</string>
									<key>name</key>
									<string>variable.parameter.function.js</string>
								</dict>
								<dict>
									<key>match</key>
									<string>,</string>
									<key>name</key>
									<string>punctuation.separator.parameters.function.js</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.function.begin.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>function body</string>
					<key>contentName</key>
					<string>meta.function.body</string>
					<key>end</key>
					<string>}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.function.end.js</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#core</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-function-call</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!function )(?=[_$a-zA-Z][_$\w]*\s*\()</string>
					<key>end</key>
					<string>(?=\()</string>
					<key>name</key>
					<string>meta.function-call.static.with-arguments.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>[_$a-zA-Z][_$\w]*</string>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-function-constructor</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.constant.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>match stuff like: Sound.prototype = { … } when extending an object</string>
					<key>match</key>
					<string>([a-zA-Z_?.$][\w?.$]*)\.(prototype)\s*=\s*</string>
					<key>name</key>
					<string>meta.class.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>match stuff like: Sound.play = function() { … }</string>
					<key>match</key>
					<string>(?:([a-zA-Z_?.$][\w?.$]*)\.)?([a-zA-Z_?.$][\w?.$]*)\s*=\s*(?=function)</string>
					<key>name</key>
					<string>meta.function.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>match stuff like: foobar: function() { … }</string>
					<key>match</key>
					<string>\b([a-zA-Z_?.$][\w?.$]*)\s*(:)(?=\s*function)</string>
					<key>name</key>
					<string>meta.function.json.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.quoted.single.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>string.quoted.double.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Attempt to match "foo": function</string>
					<key>match</key>
					<string>(?:((')(.*?)('))|((")(.*?)(")))\s*(:)(?=\s*function)</string>
					<key>name</key>
					<string>meta.function.json.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.new.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.class.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(new)\s+(\w+(?:\.\w*)?)</string>
					<key>name</key>
					<string>meta.class.instance.constructor</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(boolean|byte|char|class|double|enum|float|function|int|interface|long|short|var|void)\b</string>
					<key>name</key>
					<string>storage.type.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(const|export|extends|final|implements|native|private|protected|public|static|synchronized|throws|transient|volatile)\b</string>
					<key>name</key>
					<string>storage.modifier.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(break|case|catch|continue|default|do|else|finally|for|goto|if|import|package|return|switch|throw|try|while)\b</string>
					<key>name</key>
					<string>keyword.control.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(delete|in(stanceof)?|new|typeof|void|with)\b</string>
					<key>name</key>
					<string>keyword.operator.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\btrue\b</string>
					<key>name</key>
					<string>constant.language.boolean.true.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bfalse\b</string>
					<key>name</key>
					<string>constant.language.boolean.false.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bnull\b</string>
					<key>name</key>
					<string>constant.language.null.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bundefined\b</string>
					<key>name</key>
					<string>constant.language.null.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bNaN\b</string>
					<key>name</key>
					<string>constant.language.null.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(super|this|arguments)\b</string>
					<key>name</key>
					<string>variable.language.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=\.)\b(prototype|constructor)\b</string>
					<key>name</key>
					<string>variable.language.js</string>
				</dict>
				<dict>
					<key>disabled</key>
					<integer>1</integer>
					<key>match</key>
					<string>!|%|&amp;|\*|\-\-|\-|\+\+|\+|~|===|==|=|!=|!==|&lt;=|&gt;=|&lt;&lt;=|&gt;&gt;=|&gt;&gt;&gt;=|&lt;&gt;|&lt;|&gt;|!|&amp;&amp;|\|\||\?\:|\*=|/=|%=|\+=|\-=|&amp;=|\^=</string>
					<key>name</key>
					<string>keyword.operator.js</string>
				</dict>
				<dict>
					<key>disabled</key>
					<integer>1</integer>
					<key>match</key>
					<string>:</string>
					<key>name</key>
					<string>punctuation.separator.key-value</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
					!(?!=)| # logical-not     right-to-left   right
					&amp;&amp;    | # logical-and     left-to-right   both
					\|\|   # logical-or      left-to-right   both
					</string>
					<key>name</key>
					<string>keyword.operator.logical.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
					  %= | # assignment      right-to-left   both
					  &amp;= | # assignment      right-to-left   both
					 \*= | # assignment      right-to-left   both
					 \+= | # assignment      right-to-left   both
					  -= | # assignment      right-to-left   both
					  /= | # assignment      right-to-left   both
					 \^= | # assignment      right-to-left   both
					 \|= | # assignment      right-to-left   both
					 &lt;&lt;= | # assignment      right-to-left   both
					 &gt;&gt;= | # assignment      right-to-left   both
					&gt;&gt;&gt;=   # assignment      right-to-left   both
					</string>
					<key>name</key>
					<string>keyword.operator.assignment.augmented.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
					~    | # bitwise-not     right-to-left   right
					&lt;&lt;   | # bitwise-shift   left-to-right   both
					&gt;&gt;&gt;  | # bitwise-shift   left-to-right   both
					&gt;&gt;   | # bitwise-shift   left-to-right   both
					&amp;    | # bitwise-and     left-to-right   both
					\^   | # bitwise-xor     left-to-right   both
					\|     # bitwise-or      left-to-right   both
					</string>
					<key>name</key>
					<string>keyword.operator.bitwise.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
					&lt;=   | # relational      left-to-right   both
					&gt;=   | # relational      left-to-right   both
					&lt;    | # relational      left-to-right   both
					&gt;      # relational      left-to-right   both
					</string>
					<key>name</key>
					<string>keyword.operator.relational.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
					===  | # equality        left-to-right   both
					!==  | # equality        left-to-right   both
					 ==  | # equality        left-to-right   both
					!=     # equality        left-to-right   both
					</string>
					<key>name</key>
					<string>keyword.operator.comparison.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
					=     # assignment      right-to-left   both
					</string>
					<key>name</key>
					<string>keyword.operator.assignment.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
					--   | # decrement       n/a             right-or-left
					\+\+ | # increment       n/a             right-or-left
					/    | # division        left-to-right   both
					%    | # modulus         left-to-right   both
					\*   | # multiplication  left-to-right   both
					\+   | # addition        left-to-right   both
					-      # subtraction     left-to-right   both
					</string>
					<key>name</key>
					<string>keyword.operator.arithmetic.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-labels</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;=['"])(\s*)(:)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.unquoted.label.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\?|\? |case )([_$a-zA-Z][_$\w]*)\s*(:)</string>
					<key>name</key>
					<string>constant.other.object.key.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-number</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?i)(?:\B[-+]|\b)0x[0-9a-f]*\.(\B|\b[0-9]+)</string>
					<key>name</key>
					<string>invalid.illegal.numeric.hex.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:\B[-+]|\b)0[0-9]+\.(\B|\b[0-9]+)</string>
					<key>name</key>
					<string>invalid.illegal.numeric.octal.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?xi)(?:\B[-+])?(?:
					 \b0x[0-9a-f]* # HEX
					|(          \B\.[0-9]+   # EG:    .999
					  | \b[0-9]+ (\.[0-9]*)? # EG: 999.999 or 999. or 999 
					 )(e[-+]?[0-9]+)?        # EG: e+123 or E-123
					)</string>
					<key>name</key>
					<string>constant.numeric.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:\B[-+]|\b)(Infinity)\b</string>
					<key>name</key>
					<string>constant.language.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-punctuation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\;</string>
					<key>name</key>
					<string>punctuation.terminator.statement.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>meta.delimiter.object.comma.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\.</string>
					<key>name</key>
					<string>meta.delimiter.method.period.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\{|\}</string>
					<key>name</key>
					<string>meta.brace.curly.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\(|\)</string>
					<key>name</key>
					<string>meta.brace.round.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\[|\]</string>
					<key>name</key>
					<string>meta.brace.square.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=\.)\s</string>
					<key>name</key>
					<string>meta.complete.method</string>
				</dict>
			</array>
		</dict>
		<key>literal-regex</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
						(?&lt;= [\[,=(:] | ^ | &amp;&amp; | return )
						\s*((/)) (?! [/*+{}?] | $ )</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.regexp.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>string.regexp.js</string>
					<key>end</key>
					<string>((/([igm]*)))|(?=&lt;/\s*script\s*&gt;\s*\n)|(?&lt;=[^\\]\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.regexp.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.other.js</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\\n</string>
							<key>name</key>
							<string>constant.character.escape.newline.js</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\n</string>
							<key>name</key>
							<string>invalid.illegal.newline.js</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\\.</string>
							<key>name</key>
							<string>constant.character.escape.js</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?i)'|(?=&lt;/\s*script\s*&gt;\s*\n)|(?&lt;=[^\\]\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string-single-innards</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?i)"|(?=&lt;/\s*script\s*&gt;\s*\n)|(?&lt;=[^\\]\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string-double-innards</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)[_$a-zA-Z][_$\w]*\s*(?=[\[\.])</string>
					<key>name</key>
					<string>variable.other.object.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.property-name.js</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.object.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([_$a-zA-Z][_$\w]*)\s*(?=[\[\.])</string>
					<key>name</key>
					<string>meta.property.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>variable.other.property.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;=[\.\]])\s*[_$a-zA-Z][_$\w]*</string>
					<key>name</key>
					<string>meta.property.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[_$a-zA-Z][_$\w]*</string>
					<key>name</key>
					<string>variable.other.readwrite.js</string>
				</dict>
			</array>
		</dict>
		<key>special</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(console)\b</string>
					<key>name</key>
					<string>entity.name.type.object.js.firebug</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\.(warn|info|log|error|time|timeEnd|assert)\b</string>
					<key>name</key>
					<string>support.function.js.firebug</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(debugger)\b</string>
					<key>name</key>
					<string>keyword.other.js</string>
				</dict>
			</array>
		</dict>
		<key>special-comments-conditional-compilation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>/\*(?=@)</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.conditional.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.keyword.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.conditional.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$base</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.keyword.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(@)(if|elif|else|end)</string>
					<key>name</key>
					<string>keyword.control.conditional.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.keyword.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(@)(cc_on|set)</string>
					<key>name</key>
					<string>keyword.operator.conditional.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(@)(_win32|_win16|_mac|_alpha|_x86|_mc680x0|_PowerPC|_jscript_build|_jscript_version|_jscript|_debug|_fast|[a-zA-Z]\w+)</string>
					<key>name</key>
					<string>variable.other.conditional.js</string>
				</dict>
			</array>
		</dict>
		<key>string-double-innards</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)</string>
					<key>name</key>
					<string>constant.character.escape.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\\n</string>
					<key>name</key>
					<string>constant.character.escape.newline.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\n</string>
					<key>name</key>
					<string>invalid.illegal.newline.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?i)&lt;/\s*script\s*&gt;</string>
					<key>name</key>
					<string>invalid.deprecated.inconsistent.js</string>
				</dict>
			</array>
		</dict>
		<key>string-single-innards</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)</string>
					<key>name</key>
					<string>constant.character.escape.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\\n</string>
					<key>name</key>
					<string>constant.character.escape.newline.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\n</string>
					<key>name</key>
					<string>invalid.illegal.newline.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?i)&lt;/\s*script\s*&gt;</string>
					<key>name</key>
					<string>invalid.deprecated.inconsistent.js</string>
				</dict>
			</array>
		</dict>
		<key>support</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(Anchor|Applet|Area|Array|Boolean|Button|Checkbox|Date|document|event|FileUpload|Form|Frame|Function|Hidden|History|Image|JavaArray|JavaClass|JavaObject|JavaPackage|java|Layer|Link|Location|Math|MimeType|Number|navigator|netscape|Object|Option|Packages|Password|Plugin|Radio|RegExp|Reset|Select|String|Style|Submit|screen|sun|Text|Textarea|window|XMLHttpRequest)\b</string>
					<key>name</key>
					<string>support.class.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(R(e(ferenceError|gExp)|ange(E(rror|xception))?)|X(ML(Serializer|HttpRequest(Upload|Exception)?|Document)|SLTProcessor|Path(Result|E(valuator|xception)))|M(imeTypeArray|ouseEvent|utationEvent|e(ssage(Port|Event)|dia(Error|List)))|B(oolean|eforeLoadEvent)|S(yntaxError|t(yleSheetList|orage(Event)?|ring)|VG(Re(nderingIntent|ctElement)|G(Element|radientElement)|Ma(skElement|trix|rkerElement)|S(ymbolElement|t(opElement|ringList)|witchElement|VGElement)|NumberList|C(ircleElement|olor|ursorElement|lipPathElement)|T(itleElement|ext(ContentElement|PathElement|Element)|ransform(List)?)|ImageElement|D(ocument|e(scElement|fsElement))|U(seElement|nitTypes)|P(o(int(List)?|ly(lineElement|gonElement))|a(t(h(Seg(List)?|Element)|ternElement)|int)|reserveAspectRatio)|E(l(ementInstance(List)?|lipseElement)|xception)|ViewElement|ForeignObjectElement|L(ineElement|ength(List)?)|A(ngle|Element))|QLException)|H(TML(M(ediaElement|arqueeElement)|ButtonElement|SelectElement|C(ollection|anvasElement)|T(extAreaElement|able(RowElement|SectionElement|Element))|I(nputElement|FrameElement)|O(utputElement|bjectElement)|Document|E(lement|mbedElement)|VideoElement|KeygenElement|F(ieldSetElement|ormElement|rameElement)|A(nchorElement|llCollection))|ashChangeEvent)|N(ode(Filter|List)?|umber|amedNodeMap)|C(haracterData|SS(Rule(List)?|MediaRule|Style(Sheet|Declaration)|PrimitiveValue|Value(List)?)|l(i(pboard|entRectList)|oseEvent)|anvas(RenderingContext2D|Gradient))|T(ypeError|imeRanges|ext(Event)?)|Int(16Array|8Array|32Array)|O(verflowEvent|bject)|D(ocument(Fragment)?|OM(StringList|TokenList|Implementation|Parser|Exception)|at(e|aView))|U(RIError|int(16Array|8Array|32Array)|IEvent)|P(lugin(Array)?|ageTransitionEvent|rogressEvent)|E(v(ent(Source|Exception)?|alError)|lement|rror)|KeyboardEvent|F(ileList|ormData|unction|loat32Array)|W(heelEvent|orker|eb(GLRenderingContext|Socket|Kit(CSS(Matrix|TransformValue|KeyframesRule)|TransitionEvent|AnimationEvent)))|Array)\b</string>
					<key>name</key>
					<string>support.class.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>support.function.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(s(hift|ort|plice)|unshift|p(op|ush)|reverse)\b(?=\()</string>
					<key>name</key>
					<string>entity.name.function.mutator.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>support.function.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(s(h(ift|ow(Mod(elessDialog|alDialog)|Help))|croll(X|By(Pages|Lines)?|Y|To)?|t(op|rike)|i(n|zeToContent|debar|gnText)|ort|u(p|b(str(ing)?)?)|pli(ce|t)|e(nd|t(Re(sizable|questHeader)|M(i(nutes|lliseconds)|onth)|Seconds|Ho(tKeys|urs)|Year|Cursor|Time(out)?|Interval|ZOptions|Date|UTC(M(i(nutes|lliseconds)|onth)|Seconds|Hours|Date|FullYear)|FullYear|Active)|arch)|qrt|lice|avePreferences|mall)|h(ome|andleEvent)|navigate|c(har(CodeAt|At)|o(s|n(cat|textual|firm)|mpile)|eil|lear(Timeout|Interval)?|a(ptureEvents|ll)|reate(StyleSheet|Popup|EventObject))|t(o(GMTString|S(tring|ource)|U(TCString|pperCase)|Lo(caleString|werCase))|est|a(n|int(Enabled)?))|i(s(NaN|Finite)|ndexOf|talics)|d(isableExternalCapture|ump|etachEvent)|u(n(shift|taint|escape|watch)|pdateCommands)|j(oin|avaEnabled)|p(o(p|w)|ush|lugins.refresh|a(ddings|rse(Int|Float)?)|r(int|ompt|eference))|e(scape|nableExternalCapture|val|lementFromPoint|x(p|ec(Script|Command)?))|valueOf|UTC|queryCommand(State|Indeterm|Enabled|Value)|f(i(nd|le(ModifiedDate|Size|CreatedDate|UpdatedDate)|xed)|o(nt(size|color)|rward)|loor|romCharCode)|watch|l(ink|o(ad|g)|astIndexOf)|a(sin|nchor|cos|t(tachEvent|ob|an(2)?)|pply|lert|b(s|ort))|r(ou(nd|teEvents)|e(size(By|To)|calc|turnValue|place|verse|l(oad|ease(Capture|Events)))|andom)|g(o|et(ResponseHeader|M(i(nutes|lliseconds)|onth)|Se(conds|lection)|Hours|Year|Time(zoneOffset)?|Da(y|te)|UTC(M(i(nutes|lliseconds)|onth)|Seconds|Hours|Da(y|te)|FullYear)|FullYear|A(ttention|llResponseHeaders)))|m(in|ove(B(y|elow)|To(Absolute)?|Above)|ergeAttributes|a(tch|rgins|x))|b(toa|ig|o(ld|rderWidths)|link|ack))\b(?=\()</string>
					<key>name</key>
					<string>entity.name.function.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(s(ub(stringData|mit)|plitText|e(t(NamedItem|Attribute(Node)?)|lect))|has(ChildNodes|Feature)|namedItem|c(l(ick|o(se|neNode))|reate(C(omment|DATASection|aption)|T(Head|extNode|Foot)|DocumentFragment|ProcessingInstruction|E(ntityReference|lement)|Attribute))|tabIndex|i(nsert(Row|Before|Cell|Data)|tem)|open|delete(Row|C(ell|aption)|T(Head|Foot)|Data)|focus|write(ln)?|a(dd|ppend(Child|Data))|re(set|place(Child|Data)|move(NamedItem|Child|Attribute(Node)?)?)|get(NamedItem|Element(sBy(Name|TagName)|ById)|Attribute(Node)?)|blur)\b(?=\()</string>
					<key>name</key>
					<string>support.function.dom.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=\.)(s(ystemLanguage|cr(ipts|ollbars|een(X|Y|Top|Left))|t(yle(Sheets)?|atus(Text|bar)?)|ibling(Below|Above)|ource|uffixes|e(curity(Policy)?|l(ection|f)))|h(istory|ost(name)?|as(h|Focus))|y|n(ext|ame(space(s|URI)|Prop))|c(haracterSet|o(ntrollers|okieEnabled|lorDepth|mp(onents|lete))|urrent|puClass|l(i(p(boardData)?|entInformation)|osed|asses)|alle(e|r)|rypto)|X(MLDocument|SLDocument)|M(IN_VALUE|AX_VALUE)|t(o(olbar|p)|ext(Transform|Indent|Decoration|Align)|ags)|i(n(ner(Height|Width)|put)|ds|gnoreCase)|SQRT(1_2|2)|zIndex|o(scpu|n(readystatechange|Line)|uter(Height|Width)|p(sProfile|ener)|ffscreenBuffering)|d(i(splay|alog(Height|Top|Width|Left|Arguments)|rectories)|e(scription|fault(Status|Ch(ecked|arset)|View)))|NEGATIVE_INFINITY|u(ser(Profile|Language|Agent)|niqueID|pdateInterval)|_content|p(ixelDepth|ort|ersonalbar|kcs11|l(ugins|atform)|a(thname|dding(Right|Bottom|Top|Left)|rent(Window|Layer)?|ge(X(Offset)?|Y(Offset)?))|r(o(tocol|duct(Sub)?|mpter)|e(vious|fix)))|e(n(coding|abledPlugin)|x(ternal|pando)|mbeds)|v(isibility|endor(Sub)?|Linkcolor)|URLUnencoded|f(ilename|o(nt(Size|Family|Weight)|rmName)|rame(s|Element)|gColor)|P(I|OSITIVE_INFINITY)|E|whiteSpace|l(i(stStyleType|n(eHeight|kColor))|o(ca(tion(bar)?|lName)|wsrc)|e(ngth|ft(Context)?)|a(st(M(odified|atch)|Index|Paren)|yer(s|X)|nguage))|a(pp(MinorVersion|Name|Co(deName|re)|Version)|vail(Height|Top|Width|Left)|ll|rity|bove|Linkcolor)|r(ight(Context)?|e(sponse(XML|Text)|adyState))|global|x|m(imeTypes|ultiline|enubar|argin(Right|Bottom|Top|Left))|b(o(ttom|rder(RightWidth|BottomWidth|Style|Color|TopWidth|LeftWidth))|ufferDepth|elow|ackground(Color|Image))|L(N(10|2)|OG(10E|2E)))\b</string>
					<key>name</key>
					<string>support.variable.property.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=\.)(s(hape|ystemId|c(heme|ope|rolling)|ta(ndby|rt)|ize|ummary|pecified|e(ctionRowIndex|lected(Index)?)|rc)|h(space|t(tpEquiv|mlFor)|e(ight|aders)|ref(lang)?)|n(o(Resize|tation(s|Name)|Shade|Href|de(Name|Type|Value)|Wrap)|extSibling|ame)|c(h(ildNodes|Off|ecked|arset)?|ite|o(ntent|o(kie|rds)|de(Base|Type)?|l(s|Span|or)|mpact)|ell(s|Spacing|Padding)|l(ear|assName)|aption)|t(ype|Bodies|itle|Head|ext|a(rget|gName)|Foot)|i(sMap|ndex|d|m(plementation|ages))|o(ptions|wnerDocument|bject)|d(i(sabled|r)|o(c(type|umentElement)|main)|e(clare|f(er|ault(Selected|Checked|Value)))|at(eTime|a))|useMap|p(ublicId|arentNode|r(o(file|mpt)|eviousSibling))|e(n(ctype|tities)|vent|lements)|v(space|ersion|alue(Type)?|Link|Align)|URL|f(irstChild|orm(s)?|ace|rame(Border)?)|width|l(ink(s)?|o(ngDesc|wSrc)|a(stChild|ng|bel))|a(nchors|c(ce(ssKey|pt(Charset)?)|tion)|ttributes|pplets|l(t|ign)|r(chive|eas)|xis|Link|bbr)|r(ow(s|Span|Index)|ules|e(v|ferrer|l|adOnly))|m(ultiple|e(thod|dia)|a(rgin(Height|Width)|xLength))|b(o(dy|rder)|ackground|gColor))\b</string>
					<key>name</key>
					<string>support.constant.dom.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR)\b</string>
					<key>name</key>
					<string>support.constant.dom.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bon(R(ow(s(inserted|delete)|e(nter|xit))|e(s(ize(start|end)?|et)|adystatechange))|Mouse(o(ut|ver)|down|up|move)|B(efore(cut|deactivate|u(nload|pdate)|p(aste|rint)|editfocus|activate)|lur)|S(croll|top|ubmit|elect(start|ionchange)?)|H(over|elp)|C(hange|ont(extmenu|rolselect)|ut|ellchange|l(ick|ose))|D(eactivate|ata(setc(hanged|omplete)|available)|r(op|ag(start|over|drop|en(ter|d)|leave)?)|blclick)|Unload|P(aste|ropertychange)|Error(update)?|Key(down|up|press)|Focus|Load|A(ctivate|fter(update|print)|bort))\b</string>
					<key>name</key>
					<string>support.function.event-handler.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(s(hift|trike|o(rt|me)|u(p|b(str(ing)?)?)|pli(ce|t)|e(t(M(i(nutes|lliseconds)|onth)|Seconds|Hours|Year|Time|Date|UTC(M(i(nutes|lliseconds)|onth)|Seconds|Hours|Date|FullYear)|FullYear)|a(l|rch))|lice|mall)|hasOwnProperty|now|c(har(CodeAt|At)|o(n(structor|cat)|mpile)|all|reate)|t(o(GMTString|String|TimeString|ISOString|DateString|U(TCString|pperCase)|JSON|Precision|Exponential|Fixed|Lo(cale(String|TimeString|DateString|UpperCase|LowerCase)|werCase))|est|rim(Right|Left)?)|i(s(Sealed|PrototypeOf|Extensible|Frozen|Array)|ndexOf|talics)|definePropert(y|ies)|unshift|join|__(define(Getter__|Setter__)|lookup(Getter__|Setter__))|p(op|ush|arse|r(o(totype|pertyIsEnumerable)|eventExtensions))|e(very|xec)|valueOf|keys|f(i(lter|xed)|o(nt(size|color)|rEach)|r(omCharCode|eeze))|l(ink|ocaleCompare|astIndexOf)|a(nchor|pply)|re(duce(Right)?|place|verse)|get(M(i(nutes|lliseconds)|onth)|Seconds|Hours|Year|Time(zoneOffset)?|OwnProperty(Names|Descriptor)|Da(y|te)|UTC(M(i(nutes|lliseconds)|onth)|Seconds|Hours|Da(y|te)|FullYear)|PrototypeOf|FullYear)|ma(tch|p)|b(ig|old|link))\b</string>
					<key>name</key>
					<string>support.function.js</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.js</string>
	<key>uuid</key>
	<string>0D2D03B9-F18B-4D9D-A960-716FDEC35331</string>
</dict>
</plist>
